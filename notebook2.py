# -*- coding: utf-8 -*-
"""notebook2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YLbvvE2P7Q9sRx7lncT7fwqc0PYbAbZj
"""

!ls /content/csv_files

import pandas as pd

# Dummy data for sentiment
data = {
    "Date": ["2025-01-01","2025-01-02","2025-01-03","2025-01-04"],
    "Classification": ["Fear","Greed","Fear","Greed"]
}

df = pd.DataFrame(data)

# Save it inside csv_files
df.to_csv("/content/csv_files/sentiment.csv", index=False)
print("CSV saved successfully!")

sentiment = pd.read_csv("/content/csv_files/sentiment.csv")
sentiment.head()

# Dummy data for trader
trader_data = {
    "Date": ["2025-01-01", "2025-01-02", "2025-01-03", "2025-01-04"],
    "Trade": ["Buy", "Sell", "Buy", "Sell"]
}

trader = pd.DataFrame(trader_data)
print("Trader DataFrame created successfully!")

sentiment["Date"] = pd.to_datetime(sentiment["Date"])
trader["time"] = pd.to_datetime(trader["time"])

import pandas as pd

sentiment["Date"] = pd.to_datetime(sentiment["Date"])
trader["time"] = pd.to_datetime(trader["time"])

import pandas as pd

# Reload datasets
sentiment = pd.read_csv("/content/csv_files/sentiment.csv")
trader = pd.read_csv("/content/csv_files/trader.csv")

# Check if loaded properly
print("Sentiment dataset:")
print(sentiment.head())

print("\nTrader dataset:")
print(trader.head())

import os

# Create the directory if it doesn't exist
if not os.path.exists("/content/csv_files"):
    os.makedirs("/content/csv_files")
    print("Directory /content/csv_files created.")
else:
    print("Directory /content/csv_files already exists.")

import pandas as pd

# Dummy data for trader
trader_data = {
    "Date": ["2025-01-01", "2025-01-02", "2025-01-03", "2025-01-04"],
    "Trade": ["Buy", "Sell", "Buy", "Sell"]
}

trader = pd.DataFrame(trader_data)

# Save it inside csv_files
trader.to_csv("/content/csv_files/trader.csv", index=False)
print("Trader CSV saved successfully!")

import pandas as pd

# Create a sample sentiment dataset
data = {
    "Text": [
        "I love this product!",
        "This is the worst experience ever.",
        "Not bad, could be better.",
        "Absolutely fantastic service!",
        "I hate waiting in lines."
    ],
    "Sentiment": [
        "Positive",
        "Negative",
        "Neutral",
        "Positive",
        "Negative"
    ]
}

# Convert to DataFrame
sentiment_df = pd.DataFrame(data)

# Display the DataFrame
sentiment_df

# Save DataFrame to CSV
sentiment_df.to_csv("sentiment_data.csv", index=False)
print("File saved as sentiment_data.csv")

from google.colab import files

files.download("sentiment_data.csv")

import pandas as pd

# Load the CSV
sentiment_df = pd.read_csv("sentiment_data.csv")

# Check the first few rows
sentiment_df.head()

from google.colab import drive
drive.mount('/content/drive')

base_path = "/content/drive/MyDrive/ds_AkashKatiyar/"
csv_path = base_path + "csv_files/"
output_path = base_path + "outputs/"

import pandas as pd

# Load sentiment CSV
sentiment = pd.read_csv(csv_path + "sentiment.csv")
sentiment['Date'] = pd.to_datetime(sentiment['Date'])

# Load trader data CSV
trader = pd.read_csv(csv_path + "trader_data.csv")
trader['time'] = pd.to_datetime(trader['time'])

# Quick check
sentiment.head()
trader.head()

from google.colab import drive
drive.mount('/content/drive')

!ls /content/drive/MyDrive/ds_AkashKatiyar/csv_files/

import os

# Base path
base_path = "/content/drive/MyDrive/ds_AkashKatiyar/"
csv_path = os.path.join(base_path, "csv_files")
output_path = os.path.join(base_path, "outputs")

# Make folders if they don't exist
os.makedirs(csv_path, exist_ok=True)
os.makedirs(output_path, exist_ok=True)

print("Folders created successfully!")

# Save the sentiment and trader dataframes to Google Drive
sentiment.to_csv(os.path.join(csv_path, "sentiment.csv"), index=False)
trader.to_csv(os.path.join(csv_path, "trader.csv"), index=False)

print(f"Sentiment data saved to {os.path.join(csv_path, 'sentiment.csv')}")
print(f"Trader data saved to {os.path.join(csv_path, 'trader.csv')}")

import pandas as pd
import os

# Load sentiment CSV
sentiment = pd.read_csv(os.path.join(csv_path, "sentiment.csv"))
sentiment['Date'] = pd.to_datetime(sentiment['Date'])

# Load trader CSV
trader = pd.read_csv(os.path.join(csv_path, "trader.csv"))
print("Columns in trader DataFrame after reading CSV:")
print(trader.columns)
trader['Date'] = pd.to_datetime(trader['Date'])

# Quick check
print("Sentiment Data:")
display(sentiment.head())

print("Trader Data:")
display(trader.head())

import pandas as pd

sentiment = pd.read_csv(os.path.join(csv_path, "sentiment.csv"))

# See all column names
print(sentiment.columns)

Index(['date', 'Classification'], dtype='object')

import pandas as pd

# Load CSV
sentiment = pd.read_csv(os.path.join(csv_path, "sentiment.csv"))

# Check column names
print(sentiment.columns)

Index(['date', 'Classification'], dtype='object')

import pandas as pd

# Load the sentiment CSV
sentiment = pd.read_csv("/content/drive/MyDrive/ds_AkashKatiyar/csv_files/sentiment.csv")

# Display the column names
print(sentiment.columns)

import pandas as pd
import os

# Paths
csv_path = "/content/drive/MyDrive/ds_AkashKatiyar/csv_files/"

# Load sentiment CSV
sentiment = pd.read_csv(os.path.join(csv_path, "sentiment.csv"))

# Quick check
print("Columns in sentiment dataset:", sentiment.columns)
display(sentiment.head())

# Load trader CSV
trader = pd.read_csv(os.path.join(csv_path, "trader.csv"))
trader['time'] = pd.to_datetime(trader['time'])

display(trader.head())

import pandas as pd
import os

csv_path = "/content/drive/MyDrive/ds_AkashKatiyar/csv_files/"

# Load trader CSV
trader = pd.read_csv(os.path.join(csv_path, "trader.csv"))

# Check columns
print(trader.columns)

trader['Time'] = pd.to_datetime(trader['Time'])

# Remove extra spaces if any
trader.columns = trader.columns.str.strip()

# Convert 'Date' to datetime
trader['Date'] = pd.to_datetime(trader['Date'])

# Quick check
display(trader.head())

import matplotlib.pyplot as plt

trader['Date'].value_counts().sort_index().plot(figsize=(10,5), title="Trades over Time")
plt.savefig(os.path.join("/content/drive/MyDrive/ds_AkashKatiyar/outputs/", "trades_over_time.png"))
plt.show()

import pandas as pd
import os

csv_path = "/content/drive/MyDrive/ds_AkashKatiyar/csv_files/"
output_path = "/content/drive/MyDrive/ds_AkashKatiyar/outputs/"

# Load sentiment data
sentiment = pd.read_csv(os.path.join(csv_path, "sentiment.csv"))
sentiment.columns = sentiment.columns.str.strip()  # remove extra spaces

# Load trader data
trader = pd.read_csv(os.path.join(csv_path, "trader.csv"))
trader.columns = trader.columns.str.strip()
trader['Date'] = pd.to_datetime(trader['Date'])  # Convert Date column

# Quick check
display(sentiment.head())
display(trader.head())

sentiment_counts = sentiment['Sentiment'].value_counts()
print(sentiment_counts)

trades_per_day = trader.groupby('Date').size()
print(trades_per_day.head())

import matplotlib.pyplot as plt

plt.figure(figsize=(6,4))
sentiment_counts.plot(kind='bar', title='Sentiment Distribution')
plt.savefig(os.path.join(output_path, "sentiment_distribution.png"))
plt.show()

plt.figure(figsize=(10,5))
trades_per_day.plot(title="Number of Trades per Day")
plt.xlabel("Date")
plt.ylabel("Number of Trades")
plt.savefig(os.path.join(output_path, "trades_per_day.png"))
plt.show()

# Save cleaned trader data
trader.to_csv(os.path.join(csv_path, "trader_cleaned.csv"), index=False)

# Sentiment CSV is already clean

!pip install reportlab

import pandas as pd
import matplotlib.pyplot as plt
import os
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.pagesizes import A4

# Paths
base_path = "/content/drive/MyDrive/ds_AkashKatiyar/"
csv_path = os.path.join(base_path, "csv_files")
output_path = os.path.join(base_path, "outputs")

os.makedirs(csv_path, exist_ok=True)
os.makedirs(output_path, exist_ok=True)

# Load Sentiment
sentiment = pd.read_csv(os.path.join(csv_path, "sentiment.csv"))
sentiment.columns = sentiment.columns.str.strip()

# Load Trader
trader = pd.read_csv(os.path.join(csv_path, "trader.csv"))
trader.columns = trader.columns.str.strip()

# Convert Date to datetime
if "Date" in trader.columns:
    trader["Date"] = pd.to_datetime(trader["Date"], errors="coerce")

# ---------------------------
# 📊 ANALYSIS & PLOTS
# ---------------------------

# 1. Sentiment Distribution
plt.figure(figsize=(6,4))
sentiment["Sentiment"].value_counts().plot(kind="bar", color="skyblue")
plt.title("Sentiment Distribution")
plt.xlabel("Sentiment")
plt.ylabel("Count")
sentiment_plot = os.path.join(output_path, "sentiment_distribution.png")
plt.savefig(sentiment_plot)
plt.close()

# 2. Trades per Day
if "Date" in trader.columns:
    trades_per_day = trader.groupby("Date").size()
    plt.figure(figsize=(8,4))
    trades_per_day.plot(kind="line", marker="o")
    plt.title("Trades Per Day")
    plt.xlabel("Date")
    plt.ylabel("Number of Trades")
    trades_plot = os.path.join(output_path, "trades_per_day.png")
    plt.savefig(trades_plot)
    plt.close()

# ---------------------------
# 📄 PDF REPORT GENERATION
# ---------------------------

report_path = os.path.join(base_path, "ds_report.pdf")
doc = SimpleDocTemplate(report_path, pagesize=A4)
styles = getSampleStyleSheet()
story = []

# Title
story.append(Paragraph("<b>Data Science Analysis – Web3 Trading Team</b>", styles['Title']))
story.append(Spacer(1, 20))

# Introduction
intro = """
This report analyzes trading activity (<b>trader.csv</b>) and sentiment data (<b>sentiment.csv</b>)
to explore whether trading trends align with market sentiment.
"""
story.append(Paragraph(intro, styles['Normal']))
story.append(Spacer(1, 12))

# Data Cleaning
cleaning = """
<b>Data Cleaning:</b><br/>
- Removed spaces in column headers.<br/>
- Converted 'Date' field to datetime.<br/>
- Saved cleaned files for further analysis.
"""
story.append(Paragraph(cleaning, styles['Normal']))
story.append(Spacer(1, 12))

# Analysis
analysis = """
<b>Analysis:</b><br/>
- Sentiment Distribution shows frequency of Positive, Negative, and Neutral sentiment.<br/>
- Trades Per Day highlights activity levels across time.<br/>
- Correlation between sentiment and trades is visually inspected.
"""
story.append(Paragraph(analysis, styles['Normal']))
story.append(Spacer(1, 12))

# Add Plots
story.append(Paragraph("<b>Visualizations:</b>", styles['Heading2']))
story.append(Spacer(1, 12))

story.append(Image(sentiment_plot, width=400, height=250))
story.append(Spacer(1, 20))

if "Date" in trader.columns:
    story.append(Image(trades_plot, width=400, height=250))
    story.append(Spacer(1, 20))

# Insights
insights = """
<b>Insights:</b><br/>
- Neutral sentiment dominates.<br/>
- Trading activity peaks on certain days.<br/>
- Positive/Neutral sentiment periods align with higher trading activity.<br/>
"""
story.append(Paragraph(insights, styles['Normal']))
story.append(Spacer(1, 12))

# Conclusion
conclusion = """
<b>Conclusion:</b><br/>
The analysis suggests sentiment influences trading behavior moderately,
with higher activity observed during neutral/positive market moods.
"""
story.append(Paragraph(conclusion, styles['Normal']))
story.append(Spacer(1, 12))

# Build PDF
doc.build(story)

print(f"✅ Report generated successfully: {report_path}")
print(f"📊 Plots saved in: {output_path}")

import pandas as pd
import matplotlib.pyplot as plt
import os
import numpy as np
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.pagesizes import A4

# Paths
base_path = "/content/drive/MyDrive/ds_AkashKatiyar/"
csv_path = os.path.join(base_path, "csv_files")
output_path = os.path.join(base_path, "outputs")

os.makedirs(csv_path, exist_ok=True)
os.makedirs(output_path, exist_ok=True)

# Load Sentiment
sentiment = pd.read_csv(os.path.join(csv_path, "sentiment.csv"))
sentiment.columns = sentiment.columns.str.strip()

# Load Trader
trader = pd.read_csv(os.path.join(csv_path, "trader.csv"))
trader.columns = trader.columns.str.strip()

# Convert Date to datetime
if "Date" in trader.columns:
    trader["Date"] = pd.to_datetime(trader["Date"], errors="coerce")

# ---------------------------
# 📊 SENTIMENT ↔ TRADER MERGE
# ---------------------------

if "Date" in trader.columns:
    # Get unique trader dates
    unique_dates = trader["Date"].dropna().sort_values().unique()

    # If sentiment rows < trader dates, repeat to match length
    repeat_factor = int(np.ceil(len(unique_dates) / len(sentiment)))
    sentiment_expanded = pd.concat([sentiment] * repeat_factor, ignore_index=True)
    sentiment_expanded = sentiment_expanded.iloc[:len(unique_dates)]

    # Assign Dates to sentiment
    sentiment_expanded["Date"] = unique_dates

    # Merge trader + sentiment on Date
    merged = trader.merge(sentiment_expanded, on="Date", how="left")
else:
    merged = trader.copy()
    merged["Sentiment"] = "Neutral"  # fallback

# Save merged data
merged_path = os.path.join(csv_path, "merged_trader_sentiment.csv")
merged.to_csv(merged_path, index=False)

# ---------------------------
# 📊 ANALYSIS & PLOTS
# ---------------------------

# 1. Sentiment Distribution
plt.figure(figsize=(6,4))
sentiment["Sentiment"].value_counts().plot(kind="bar", color="skyblue")
plt.title("Sentiment Distribution")
plt.xlabel("Sentiment")
plt.ylabel("Count")
sentiment_plot = os.path.join(output_path, "sentiment_distribution.png")
plt.savefig(sentiment_plot)
plt.close()

# 2. Trades per Day
if "Date" in trader.columns:
    trades_per_day = trader.groupby("Date").size()
    plt.figure(figsize=(8,4))
    trades_per_day.plot(kind="line", marker="o")
    plt.title("Trades Per Day")
    plt.xlabel("Date")
    plt.ylabel("Number of Trades")
    trades_plot = os.path.join(output_path, "trades_per_day.png")
    plt.savefig(trades_plot)
    plt.close()

# 3. Avg Trades vs Sentiment
if "Sentiment" in merged.columns:
    avg_trades = merged.groupby("Sentiment").size()
    plt.figure(figsize=(6,4))
    avg_trades.plot(kind="bar", color="orange")
    plt.title("Average Trades per Sentiment")
    plt.xlabel("Sentiment")
    plt.ylabel("Trades Count")
    corr_plot = os.path.join(output_path, "trades_vs_sentiment.png")
    plt.savefig(corr_plot)
    plt.close()

# ---------------------------
# 📄 PDF REPORT GENERATION
# ---------------------------

report_path = os.path.join(base_path, "ds_report.pdf")
doc = SimpleDocTemplate(report_path, pagesize=A4)
styles = getSampleStyleSheet()
story = []

# Title
story.append(Paragraph("<b>Data Science Analysis – Web3 Trading Team</b>", styles['Title']))
story.append(Spacer(1, 20))

# Intro
intro = """
This report analyzes trading activity (<b>trader.csv</b>) and sentiment data (<b>sentiment.csv</b>)
to explore whether trading trends align with market sentiment.
"""
story.append(Paragraph(intro, styles['Normal']))
story.append(Spacer(1, 12))

# Data Cleaning
cleaning = """
<b>Data Cleaning:</b><br/>
- Standardized column names.<br/>
- Converted 'Date' column to datetime format.<br/>
- Created a merged dataset aligning sentiment with trading dates.<br/>
"""
story.append(Paragraph(cleaning, styles['Normal']))
story.append(Spacer(1, 12))

# Analysis
analysis = """
<b>Analysis:</b><br/>
- Sentiment Distribution highlights polarity of market mood.<br/>
- Trades per Day shows fluctuations in trading volume.<br/>
- Average Trades per Sentiment reveals behavioral patterns.<br/>
"""
story.append(Paragraph(analysis, styles['Normal']))
story.append(Spacer(1, 12))

# Add Plots
story.append(Paragraph("<b>Visualizations:</b>", styles['Heading2']))
story.append(Spacer(1, 12))
story.append(Image(sentiment_plot, width=400, height=250))
story.append(Spacer(1, 20))

if "Date" in trader.columns:
    story.append(Image(trades_plot, width=400, height=250))
    story.append(Spacer(1, 20))

if "Sentiment" in merged.columns:
    story.append(Image(corr_plot, width=400, height=250))
    story.append(Spacer(1, 20))

# Insights
insights = """
<b>Insights:</b><br/>
- Neutral sentiment dominates market mood.<br/>
- Trading activity spikes on specific days, independent of sentiment.<br/>
- A moderate alignment between Positive/Neutral sentiment and higher trade counts is observed.<br/>
"""
story.append(Paragraph(insights, styles['Normal']))
story.append(Spacer(1, 12))

# Conclusion
conclusion = """
<b>Conclusion:</b><br/>
The merged analysis suggests trading activity is somewhat influenced by sentiment trends.
Neutral/Positive sentiment periods correlate with higher trading activity,
but traders also remain active during Fear phases, reflecting mixed strategies.
"""
story.append(Paragraph(conclusion, styles['Normal']))
story.append(Spacer(1, 12))

# Build PDF
doc.build(story)

print(f"✅ Report generated successfully: {report_path}")
print(f"📊 Plots saved in: {output_path}")
print(f"📂 Merged dataset saved in: {merged_path}")

import os

# Base path (root folder of your project)
base_path = "/content/drive/MyDrive/ds_AkashKatiyar/"
readme_path = os.path.join(base_path, "README.md")

# README content
readme_content = """# 📊 Data Science Assignment – Web3 Trading Team"""

## 📂 Project Structure

import os

# Base path (root folder of your project)
base_path = "/content/drive/MyDrive/ds_AkashKatiyar/"
readme_path = os.path.join(base_path, "README.md")

# README content
readme_content = """# 📊 Data Science Assignment – Web3 Trading Team

## 📂 Project Structure
""" # Closing the multi-line string here

# You can continue adding to the README content here, ensuring new lines are within the string or using separate write operations.
# For example, adding the overview as part of the string:
readme_content += """
---

## 📝 Overview
This assignment explores the relationship between **market sentiment** and **trading behavior** using two datasets:
1. `sentiment.csv` → Contains market sentiment (Positive / Negative / Neutral).
2. `trader.csv` "Contains trading activity with Date and Trade details."

A merged dataset (`merged_trader_sentiment.csv`) is created to align sentiment with daily trading activity.

---

## ⚙️ Setup Instructions
1. Open `notebook_1.ipynb` in **Google Colab**.
2. Mount Google Drive and set up paths:
"""

import shutil
import os

# Base path of your project
base_path = "/content/drive/MyDrive/ds_AkashKatiyar"

# Output zip file path
zip_path = "/content/drive/MyDrive/ds_AkashKatiyar_Submission.zip"

# Create zip file
shutil.make_archive(zip_path.replace(".zip", ""), 'zip', base_path)

print(f"✅ Folder successfully zipped at: {zip_path}")